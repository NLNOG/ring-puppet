#!/usr/bin/env python
import os, sys, inspect, re, string
import MySQLdb as mdb
sys.path.append('/opt/graphite/webapp')
os.environ["DJANGO_SETTINGS_MODULE"] = "graphite.settings"
from django.contrib.auth.models import User

DBHOST='dbmaster.infra.ring.nlnog.net'
DBUSER='ring'
DBPASS=''
DB='ring'

class commands(object):
    def __init__(self):
        super(commands, self).__init__()

    def run(self, argv):
        func = None
        for i in reversed(range(len(argv))):
            try:
                func = getattr(self, 'cmd_'+'_'.join(argv[0:i+1]))

                args, kwargs = self.splitargv(argv[i+1:])
                break
            except AttributeError:
                pass
            except UnicodeEncodeError:
                pass

        if not func:
            return self.usage()

        spec = inspect.getargspec(func)
        reqcount = len(spec.args)-1
        if spec.defaults:
            reqcount = reqcount - len(spec.defaults)
        if reqcount and not len(args) and not len(kwargs):
            kwargs=self.ask(func)
        return func(*args, **kwargs)

    def ask(self, func):
        spec = inspect.getargspec(func)
        d=dict()
        for i,k in enumerate(spec.args[1:]):
            print "%s:" % k,
            if i >= (len(spec.args)-len(spec.defaults)-1):
                print "(optional)",
            v=raw_input()
            d[k]=v
        return d

    def splitargv(self, argv):
        args = list()
        kwargs = dict()
        for arg in argv:
            if '=' in arg:
                k,v = arg.split('=',1)
                kwargs[k]=v
            else:
                if kwargs:
                    raise SyntaxError
                args.append(arg)

        return args, kwargs

    def usage(self):
        cmds = []
        for k, v in sorted(inspect.getmembers(self)):
            if k.startswith('cmd_'):
                cmd = k[4:].replace('_',' ')
                argspec = inspect.getargspec(v)
                args = []
                if argspec.defaults:
                    defcount = len(argspec.defaults)
                    for arg in argspec.args[1:-defcount]:
                        args.append('<%s>' % arg)
                    for arg in argspec.args[-defcount:]:
                        args.append('[%s]' % arg)
                else:
                    for arg in argspec.args[1:]:
                        args.append('<%s>' % arg)
                doc=v.__doc__
                if not doc:
                    doc=''
                cmds.append(('%s %s' % (cmd, ' '.join(args)), doc))

        maxcmdlen = max(len(cmd[0]) for cmd in cmds)
        for cmd, doc in cmds:
            print '%-*s %s' % (maxcmdlen+2, cmd, doc)
        return 1

    def dbquery(self, q, v=None):
        conn = mdb.connect(DBHOST,DBUSER,DBPASS,DB)
        if not conn:
            sys.stderr.write("could not connect to db\n")
            sys.exit(1)
        cur = conn.cursor(mdb.cursors.DictCursor)
        if v:
            cur.execute(q, v)
        else:
            cur.execute(q)
        for row in cur.fetchall():
            yield row
        conn.close()

    def getparticipant(self,username):
        query = "select active, participant from users where username='%s'" % (username)
        users = list(self.dbquery(query))
        if (len(users)<1):
            return
        for u in users:
            if u['active'] == 0:
                return
            query = "select * from participants where id=%s" % (u['participant'])
            participants = list(self.dbquery(query))
            if (len(participants)<1):
                return
            return participants[0]

    def django_add_user(self,username,email,password):
        try:
            u = User.objects.get(username__exact=username)
            if u:
                sys.exit('user %s already exists' % (username))
        except User.DoesNotExist:
            pass
        User.objects.create_user(username,email,password)
    
    def django_update_user(self,username,attribute,value):
        try:
            u = User.objects.get(username__exact=username)
            if attribute=='email':
                u.email = value
            elif attribute=='password':
                u.set_password(value)
            else:
                sys.exit('unsupported attribute' % (attribute))
            u.save()
        except User.DoesNotExist:
            sys.exit('user %s does not exist' % (username))
            pass
    
    def django_del_user(self,username):
        try:
            u = User.objects.get(username__exact=username)
            u.delete()
        except User.DoesNotExist:
            sys.exit('user %s does not exist' % (username))
            pass

    def django_get_user(self,username):
        try:
            return User.objects.get(username__exact=username)
        except User.DoesNotExist:
            return None

    def django_get_users(self):
        return list(User.objects.all())

    def cmd_add_user(self,username,pwfile=None):
        """add a graphite user"""

        p=self.getparticipant(username)
        if not p:
            sys.exit('user %s not found in ring database' % username)
        email=p['nocemail']

        file = None
        if pwfile:
            file = open(pwfile,"r")
        else:
            file = sys.stdin
        line = file.readline()
        password = line.strip()
        if (len(password)<1):
            sys.exit('could not read password from file')
        self.django_add_user(username,email,password)
        print "Added graphite user entry for %s" % (username)
        file.close()
    
    def cmd_update_user(self,username,pwfile=None):
        """update a graphite user"""

        p=self.getparticipant(username)
        if not p:
            sys.exit('user %s not found in ring database' % username)
        email=p['nocemail']

        file = None
        if pwfile:
            file = open(pwfile,"r")
        else:
            file = sys.stdin
        line = file.readline()
        password = line.strip()
        if (len(password)<1):
            sys.exit('could not read password from file')
        self.django_update_user(username,'email',email)
        self.django_update_user(username,'password',password)
        print "Updated graphite user entry for %s" % (username)
        file.close()
    
    def cmd_del_user(self,username):
        """delete a graphite user"""
        
        self.django_del_user(username)
        print "Deleted graphite user entry for %s" % (username)
    
    def cmd_import_users(self,pwfile=None):
        """import graphite users from file"""

        # Retrieve new users
        file = None
        newusers = dict()
        if pwfile:
            file = open(pwfile, "r")
        else:
            file = sys.stdin
        for line in file:
            if (re.search(r'^#', line)):
                continue
            vals = line.split(':')
            if len(vals) < 2:
                print >> sys.stderr, "Skipping invalid entry"
                continue
            newusers[vals[0]] = vals[1].rstrip()
        file.close()

        # Retrieve existing users
        oldusers = self.django_get_users()

        # Delete removed users
        for u in oldusers:
            old = u.username
            p=self.getparticipant(old)
            if not p:
                continue
            elif not old in newusers:
                print "Deleting %s" % (old)
                self.django_del_user(old)

        # Add new users or update data
        for new in newusers:
            p=self.getparticipant(new)
            if not p:
                print >> sys.stderr, "user %s not found in ring database" % (new)
                continue
            email=p['nocemail']
            password=newusers[new]

            if self.django_get_user(new):
                print "Updating %s" % (new)
                self.django_update_user(new,'email',email)
                self.django_update_user(new,'password',password)
            else:
                print "Adding %s" % (new)
                self.django_add_user(new,email,password)

    def cmd_list_users(self):
        """list graphite users"""
        users = self.django_get_users()
        for u in users:
            print "%-20s\t%s" % (u.username,u.email)

def run(args):
    c = commands()
    c.run(args)

if __name__ == "__main__":
    c = commands()
    sys.exit(c.run([s.decode(sys.stdout.encoding or os.environ.get('LC_CTYPE','.').split('.',1)[1] or 'utf-8') for s in sys.argv[1:]]))

